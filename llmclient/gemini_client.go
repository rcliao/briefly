package llmclient

import (
	"context"
	"fmt"
	"log" // Added for logging potential issues if needed within the client

	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

// Prompts are now package-level constants for easy iteration and visibility.
const (
	summarizeTextPromptTemplate = "Please summarize the following text concisely:\n\n---\n%s\n---"
	finalDigestPromptTemplate   = `You are an assistant tasked with creating a friendly and cohesive weekly digest in Markdown format.
Below are several summaries of articles, each explicitly linked to its original source URL.
Your goal is to synthesize these into a single, engaging narrative digest.
Please ensure that you properly cite the original URLs for the information presented using Markdown links.
The digest should be well-structured, easy to read, and have a friendly tone.

Here are the summaries and their sources:

%s

---
Please generate the final weekly digest based on the provided content.
Ensure the output is in Markdown format, includes a main title for the digest, and incorporates the summaries smoothly with citations.
For example, a citation might look like: "This was discussed in an article about X ([source](URL))".`
)

// SummarizeText sends the given text content to the Gemini API for summarization.
// It now requires the apiKey and modelName to be passed directly.
func SummarizeText(apiKey string, modelName string, textContent string) (string, error) {
	if apiKey == "" {
		return "", fmt.Errorf("Gemini API key is not provided")
	}
	if modelName == "" {
		return "", fmt.Errorf("Gemini model name is not provided")
	}

	ctx := context.Background()
	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		return "", fmt.Errorf("failed to create Gemini client: %w", err)
	}
	defer client.Close()

	model := client.GenerativeModel(modelName)
	prompt := fmt.Sprintf(summarizeTextPromptTemplate, textContent)

	// Using log for internal information within the client if needed,
	// but primary logging of calls should be from the main package.
	log.Printf("llmclient: Sending summarization request to Gemini (model: %s). Prompt length: %d chars.", modelName, len(prompt))

	resp, err := model.GenerateContent(ctx, genai.Text(prompt))
	if err != nil {
		return "", fmt.Errorf("failed to generate content for summarization: %w", err)
	}

	if len(resp.Candidates) == 0 || len(resp.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no content generated by the API for summarization")
	}

	summaryPart := resp.Candidates[0].Content.Parts[0]
	summary, ok := summaryPart.(genai.Text)
	if !ok {
		return "", fmt.Errorf("unexpected response format from API for summarization, expected genai.Text")
	}

	return string(summary), nil
}

// GenerateFinalDigest sends the combined summaries and sources to the Gemini API to generate a cohesive digest.
// It now requires the apiKey and modelName to be passed directly.
func GenerateFinalDigest(apiKey string, modelName string, combinedSummariesAndSources string) (string, error) {
	if apiKey == "" {
		return "", fmt.Errorf("Gemini API key is not provided")
	}
	if modelName == "" {
		return "", fmt.Errorf("Gemini model name is not provided")
	}

	ctx := context.Background()
	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		return "", fmt.Errorf("failed to create Gemini client: %w", err)
	}
	defer client.Close()

	model := client.GenerativeModel(modelName)
	prompt := fmt.Sprintf(finalDigestPromptTemplate, combinedSummariesAndSources)

	log.Printf("llmclient: Sending final digest generation request to Gemini (model: %s). Prompt length: %d chars.", modelName, len(prompt))

	resp, err := model.GenerateContent(ctx, genai.Text(prompt))
	if err != nil {
		return "", fmt.Errorf("failed to generate content for final digest: %w", err)
	}

	if len(resp.Candidates) == 0 || len(resp.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no content generated by the API for final digest")
	}

	digestPart := resp.Candidates[0].Content.Parts[0]
	digest, ok := digestPart.(genai.Text)
	if !ok {
		return "", fmt.Errorf("unexpected response format from API for final digest, expected genai.Text")
	}

	return string(digest), nil
}
