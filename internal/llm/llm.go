package llm

import (
	"briefly/internal/core"
	"context"
	"fmt"
	"os" // Added to fetch API key from environment variable

	"github.com/google/generative-ai-go/genai"
	"github.com/spf13/viper"
	"google.golang.org/api/option"
)

const (
	// DefaultModel is the default Gemini model to use for summarization.
	DefaultModel = "gemini-1.5-flash-latest" // As requested
	// SummarizeTextPromptTemplate is the template for the summarization prompt.
	SummarizeTextPromptTemplate = "Please summarize the following text concisely:\n\n---\n%s\n---"
)

// Client represents a client for interacting with an LLM.
// It can be expanded to include more configuration or methods.
type Client struct {
	apiKey      string
	modelName   string
	gClient     *genai.Client          // Store the main client
	genaiModel  *genai.GenerativeModel // Store the model for reuse
}

// NewClient creates a new LLM client.
// It supports multiple ways to get the API key (in order of preference):
// 1. Environment variable: GEMINI_API_KEY
// 2. Viper configuration: gemini.api_key
func NewClient(modelName string) (*Client, error) {
	// Try to get API key from multiple sources
	apiKey := os.Getenv("GEMINI_API_KEY")
	if apiKey == "" {
		apiKey = viper.GetString("gemini.api_key")
	}
	if apiKey == "" {
		return nil, fmt.Errorf("Gemini API key not found. Set GEMINI_API_KEY environment variable or configure gemini.api_key in config file")
	}

	// Get model name from parameter, viper config, or default
	if modelName == "" {
		modelName = viper.GetString("gemini.model")
		if modelName == "" {
			modelName = DefaultModel
		}
	}

	ctx := context.Background()
	gClient, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		return nil, fmt.Errorf("failed to create Gemini client: %w", err)
	}
	
	model := gClient.GenerativeModel(modelName)

	return &Client{
		apiKey:     apiKey,
		modelName:  modelName,
		gClient:    gClient,
		genaiModel: model,
	}, nil
}

// SummarizeArticleText takes an Article object, extracts its CleanedText,
// and returns a Summary object.
func (c *Client) SummarizeArticleText(article core.Article) (core.Summary, error) {
	if article.CleanedText == "" {
		return core.Summary{}, fmt.Errorf("article ID %s has no CleanedText to summarize", article.ID)
	}

	prompt := fmt.Sprintf(SummarizeTextPromptTemplate, article.CleanedText)

	ctx := context.Background()
	resp, err := c.genaiModel.GenerateContent(ctx, genai.Text(prompt))
	if err != nil {
		return core.Summary{}, fmt.Errorf("failed to generate content for article ID %s: %w", article.ID, err)
	}

	if len(resp.Candidates) == 0 || len(resp.Candidates[0].Content.Parts) == 0 {
		return core.Summary{}, fmt.Errorf("no content generated by the API for article ID %s", article.ID)
	}

	summaryPart := resp.Candidates[0].Content.Parts[0]
	summaryText, ok := summaryPart.(genai.Text)
	if !ok {
		return core.Summary{}, fmt.Errorf("unexpected response format from API for article ID %s, expected genai.Text", article.ID)
	}

	// Populate the Summary struct
	// ID for summary can be generated, or based on article ID if 1:1
	// For now, let's assume a new UUID for summary would be generated elsewhere or not strictly needed yet.
	summary := core.Summary{
		// ID: will be set by the caller or a storage layer
		ArticleIDs:  []string{article.ID},
		SummaryText: string(summaryText),
		ModelUsed:   c.modelName,
		// Instructions: Could be the prompt template, or a more abstract description
		Instructions: SummarizeTextPromptTemplate, // Or a reference to it
		// DateGenerated: time.Now().UTC(), // This should be set when the summary is finalized
	}

	return summary, nil
}

// Close cleans up resources used by the client
func (c *Client) Close() {
	if c.gClient != nil {
		c.gClient.Close()
	}
}

// GenerateSummary is a simpler function, more aligned with the original request,
// that takes text and returns a summary string.
// It uses the GEMINI_API_KEY environment variable and the default model.
func GenerateSummary(textContent string) (string, error) {
	apiKey := os.Getenv("GEMINI_API_KEY")
	if apiKey == "" {
		return "", fmt.Errorf("GEMINI_API_KEY environment variable not set")
	}

	ctx := context.Background()
	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		return "", fmt.Errorf("failed to create Gemini client: %w", err)
	}
	defer client.Close()

	model := client.GenerativeModel(DefaultModel)
	prompt := fmt.Sprintf(SummarizeTextPromptTemplate, textContent)

	resp, err := model.GenerateContent(ctx, genai.Text(prompt))
	if err != nil {
		return "", fmt.Errorf("failed to generate content for summarization: %w", err)
	}

	if len(resp.Candidates) == 0 || len(resp.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no content generated by the API for summarization")
	}

	summaryPart := resp.Candidates[0].Content.Parts[0]
	summary, ok := summaryPart.(genai.Text)
	if !ok {
		return "", fmt.Errorf("unexpected response format from API for summarization, expected genai.Text")
	}

	return string(summary), nil
}
